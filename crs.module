<?php
// $Id$

/**
 * @file
 * Adds support for currencies in Ubercart
 */

/**
 * List of supported currencies
 */
function crs_currencies() {
  return array('EUR', 'USD');
}

/**
 * hook_perm()
 */
function crs_perm() {
  return array('crs change currency');
}

/**
 * hook_menu()
 */
function crs_menu() {
  $items['admin/store/currency'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Exchange rates',
    'access arguments' => array('crs change currency'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crs_exchangerate_form'),
  );

  return $items;
}

/**
 * hook_nodeapi()
 */
function crs_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (in_array($node->type, uc_product_product_types())) {
    switch ($op) {
      case 'load':
        $q = db_fetch_object(db_query('SELECT
          crs_list_price, crs_list_price_cur,
          crs_cost, crs_cost_cur,
          crs_sell_price, crs_sell_price_cur
          FROM {uc_products} WHERE vid = %d', $node->vid));

        $native = variable_get('uc_currency_code', 'USD');

        if ($q->crs_list_price && $q->crs_list_price_cur) {
          $node->_list_price = $node->list_price;
          $node->list_price = crs_exch($q->crs_list_price, $q->crs_list_price_cur, $native);
        }

        if ($q->crs_cost && $q->crs_cost_cur) {
          $node->_cost = $node->_cost;
          $node->cost = crs_exch($q->crs_cost, $q->crs_cost_cur, $native);
        }

        if ($q->crs_sell_price && $q->crs_sell_price_cur) {
          $node->_sell_price = $node->sell_price;
          $node->sell_price = crs_exch($q->crs_sell_price, $q->crs_sell_price_cur, $native);
        }
        break;
        
      case 'update':
        db_query("UPDATE {uc_products} SET
          crs_list_price = %d,
          crs_list_price_cur = '%s',
          crs_cost = %d, 
          crs_cost_cur = '%s',
          crs_sell_price = %d, 
          crs_sell_price_cur = '%s'
          WHERE vid = %d", 
          $node->crs_list_price, $node->crs_list_price_cur, 
          $node->crs_cost, $node->crs_cost_cur,
          $node->crs_sell_price, $node->crs_sell_price_cur,
          $node->vid);
        break;
      
      case 'validate':
        $pattern = '/^\d*(\.\d*)?$/';
        $price_error = t('Price must be in a valid number format. No commas and only one decimal point.');
        if (!empty($node->crs_list_price) && !is_numeric($node->crs_list_price) && !preg_match($pattern, $node->crs_list_price)) {
          form_set_error('crs_list_price', $price_error);
        }
        if (!empty($node->crs_cost) && !is_numeric($node->crs_cost) && !preg_match($pattern, $node->crs_cost)) {
          form_set_error('crs_cost', $price_error);
        }
        if (!is_numeric($node->crs_sell_price) && !preg_match($pattern, $node->crs_sell_price)) {
          form_set_error('crs_sell_price', $price_error);
        }
        break;
    }
  }
}

/**
 * hook_theme()
 */
function crs_theme() {
  return array(
    'crs_uc_product_form_prices' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * hook_form_FORM_ID_alter() for product_node_form
 */
function crs_form_product_node_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'crs') . '/crs.css');
  dsm(array($form, &$form_state));
  
  if (isset($form['#node']->_list_price)) {
    $form['base']['prices']['list_price']['#default_value'] = $form['#node']->_list_price;
  }
  if (isset($form['#node']->_cost)) {
    $form['base']['prices']['cost']['#default_value'] = $form['#node']->_cost;
  }
  if (isset($form['#node']->_sell_price)) {
    $form['base']['prices']['sell_price']['#default_value'] = $form['#node']->_sell_price;
  }
  
  $form['base']['prices']['#theme'] = 'crs_uc_product_form_prices';
  $form['base']['prices']['crs_list_price'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => $form['#node']->crs_list_price,
    '#title' => t('List price'),
    
  );
  $form['base']['prices']['crs_cost'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => $form['#node']->crs_cost,
    '#title' => t('Cost'),
  );
  $form['base']['prices']['crs_sell_price'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => $form['#node']->crs_sell_price,
    '#title' => t('Sell price'),
    '#required' => TRUE,
  );
  
  $currencies = array_merge(array(variable_get('uc_currency_code', 'USD')), crs_currencies());
  $currencies = array_combine($currencies, $currencies);
  $form['base']['prices']['crs_list_price_cur'] = array(
    '#type' => 'select',
    '#title' => t('Crs'),
    '#options' => $currencies,
    '#default_value' => empty($form['#node']->crs_list_price_cur) ? 
      variable_get('uc_currency_code', 'USD') : $form['#node']->crs_list_price_cur,
  );
  $form['base']['prices']['crs_cost_cur'] = array(
    '#type' => 'select',
    '#title' => t('Crs'),
    '#options' => $currencies,
    '#default_value' => empty($form['#node']->crs_cost_cur) ? 
      variable_get('uc_currency_code', 'USD') : $form['#node']->crs_cost_cur,
  );
  $form['base']['prices']['crs_sell_price_cur'] = array(
    '#type' => 'select',
    '#title' => t('Crs'),
    '#options' => $currencies,
    '#default_value' => empty($form['#node']->crs_sell_price_cur) ? 
      variable_get('uc_currency_code', 'USD') : $form['#node']->crs_sell_price_cur,
  );
  
}

/**
 * Theme function for prices in product_price_form
 */
function theme_crs_uc_product_form_prices($form) {
  $isShowNative = !variable_get('crs_show_native', FALSE) ? 'style="display: none"' : '';
  $output = "<table $isShowNative><tr><td>\n". drupal_render($form['list_price'])
    .'</td><td>'. drupal_render($form['cost'])
    .'</td><td>'. drupal_render($form['sell_price'])
    ."</td></tr></table>\n";
  $output .= "<table id=\"crs-fields\">
    <tr><td>\n". drupal_render($form['crs_list_price']) . drupal_render($form['crs_list_price_cur'])
    .'</td><td>'. drupal_render($form['crs_cost']) . drupal_render($form['crs_cost_cur'])
    .'</td><td>'. drupal_render($form['crs_sell_price']) . drupal_render($form['crs_sell_price_cur'])
    ."</td></tr></table>\n";
  
  return $output . drupal_render($form);
}

/**
 * Exchange rates settings form 
 */
function crs_exchangerate_form() {
  $currency_values = variable_get('crs_currency_rates', array());
  foreach (crs_currencies() as $currency) {
    $form[$currency] = array(
      '#type' => 'textfield',
      '#title' => '1 ' . $currency,
      '#default_value' => empty($currency_values[$currency]) ? 1 : $currency_values[$currency],
      '#size' => 5,
      '#description' => variable_get('uc_currency_code', 'USD'),
    );
  }
  
  $form['show_native'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show native Ubercart\'s edit price fields'),
    '#default_value' => variable_get('crs_show_native', FALSE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  return $form;
}

function crs_exchangerate_form_submit($form, &$form_state = NULL) {
  $rates = array();
  foreach (crs_currencies() as $currency) {
    $raw_value = $form_state['values'][$currency];
    $raw_value = str_replace(variable_get('uc_currency_dec', ''), '.', $raw_value);
    $raw_value = (float)$raw_value == 0 ? 1 : (float)$raw_value;
    $rates[$currency] = $raw_value;
  }
  variable_set('crs_currency_rates', $rates);
  variable_set('crs_show_native', $form_state['values']['show_native']);
}

function crs_exch($value, $src_currency, $dst_currency) {
  $currencies = variable_get('crs_currency_rates', array());
  $native_currency = variable_get('uc_currency_code', 'USD');
  $currencies[$native_currency] = 1.0;

  if ($dst_currency == $src_currency) {
    return $value;
  }

  if (!in_array($src_currency, array_keys($currencies))) {
    watchdog('crs', 'Currency \'%currency\' not found.', array('%currency' => $src_currency), WATCHDOG_ERROR);
    return 0;
  }
  if (!in_array($dst_currency, array_keys($currencies))) {
    watchdog('crs', 'Currency \'%currency\' not found.', array('%currency' => $dst_currency), WATCHDOG_ERROR);
    return 0;
  }

  return (float)$value * (float)$currencies[$src_currency] / (float)$currencies[$dst_currency];
}

/*
 * Ubercart hooks
 */

//function crs_uc_price_handler() {
//  return array(
//    'alter' => array(
//      'title' => t('Custom currency alterer'),
//      'description' => t('Handles my price alteration needs.'),
//      'callback' => 'crs_price_handler_alter',
//    ),
//    'options' => array(
//      'sign' => variable_get('uc_currency_sign', '*'),
//      'sign_after' => TRUE,
//      'prec' => 4,
//      'dec' => ',',
//      'thou' => '.',
//      'label' => FALSE,
//      'my_option_that_my_formatter_recognizes' => 1337,
//    )
//  );
//}
//
//function crs_price_handler_alter(&$price, &$context, &$options) {
//  $currency = variable_get('crs_currency_rates', array());
//  if (in_array($context['field'], array('sell_price', 'list_price', 'cost'))) {
//    $r_price    = $context['subject']['node']->{'crs_' . $context['field']};
//    $r_currency = $context['subject']['node']->{'crs_' . $context['field'] . '_cur'};
//
//    if ($r_price && $r_currency && isset($currency[$r_currency])) {
//      $price['price'] = (float)$r_price * (float)$currency[$r_currency];
//    }
//  }
//}
