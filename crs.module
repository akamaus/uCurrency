<?php
// $Id$

/**
 * @file
 * Adds support for currencies in Ubercart
 */

/**
 * hook_init()
 */
function crs_init() {
  drupal_add_css(drupal_get_path('module', 'crs') . '/crs.css');
}

/**
 * List of supported currencies
 */
function crs_currencies() {
  return array('EUR', 'USD');
}

/**
 * hook_perm()
 */
function crs_perm() {
  return array('crs change currency');
}

/**
 * hook_menu()
 */
function crs_menu() {
  return array(
    'admin/store/currency' => array(
      'type' => MENU_NORMAL_ITEM,
      'title' => 'Exchange rates',
      'access arguments' => array('crs change currency'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('crs_exchangerate_form'),
    ),
    'test_form' => array(
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('crs_test_form'),
    )
  );
  
  return $items;
}

/**
 * hook_nodeapi()
 */
function crs_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (in_array($node->type, uc_product_product_types())) {
    switch ($op) {
      case 'load':
        $q = db_fetch_object(db_query('SELECT
          crs_list_price, crs_list_price_cur,
          crs_cost, crs_cost_cur,
          crs_sell_price, crs_sell_price_cur
          FROM {uc_products} WHERE vid = %d', $node->vid));

        $native = variable_get('uc_currency_code', 'USD');

        $node->_list_price = $node->list_price;
        $node->_cost       = $node->cost;
        $node->_sell_price = $node->sell_price;

        $node->list_price = crs_exch($q->crs_list_price, $q->crs_list_price_cur, $native, 'crs_list_price');
        $node->cost       = crs_exch($q->crs_cost,       $q->crs_cost_cur,       $native, 'crs_cost');
        $node->sell_price = crs_exch($q->crs_sell_price, $q->crs_sell_price_cur, $native, 'crs_sell_price');

        $node->crs_list_price     = $q->crs_list_price;
        $node->crs_list_price_cur = $q->crs_list_price_cur;
        $node->crs_cost           = $q->crs_cost;
        $node->crs_cost_cur       = $q->crs_cost_cur;
        $node->crs_sell_price     = $q->crs_sell_price;
        $node->crs_sell_price_cur = $q->crs_sell_price_cur;
        break;

      case 'insert':
      case 'update':
        db_query("UPDATE {uc_products} SET
          crs_list_price = %f,
          crs_list_price_cur = '%s',
          crs_cost = %f,
          crs_cost_cur = '%s',
          crs_sell_price = %f,
          crs_sell_price_cur = '%s'
          WHERE vid = %d",
          $node->crs_list_price, $node->crs_list_price_cur,
          $node->crs_cost, $node->crs_cost_cur,
          $node->crs_sell_price, $node->crs_sell_price_cur,
          $node->vid);
        break;

      case 'validate':
        $pattern = '/^\d*(\.\d*)?$/';
        $price_error = t('Price must be in a valid number format. No commas and only one decimal point.');
        if (!empty($node->crs_list_price) && !is_numeric($node->crs_list_price) && !preg_match($pattern, $node->crs_list_price)) {
          form_set_error('crs_list_price', $price_error);
        }
        if (!empty($node->crs_cost) && !is_numeric($node->crs_cost) && !preg_match($pattern, $node->crs_cost)) {
          form_set_error('crs_cost', $price_error);
        }
        if (!is_numeric($node->crs_sell_price) && !preg_match($pattern, $node->crs_sell_price)) {
          form_set_error('crs_sell_price', $price_error);
        }
        break;
    }
  }
}

/**
 * hook_theme()
 */
function crs_theme() {
  return array(
    'crs_uc_product_form_prices' => array(
      'arguments' => array('form' => NULL),
    ),
    'crs_exchangerate_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'crs_option_defaults_values' => array(
      'arguments' => array('form' => NULL),
    ),

    // поле цены с валютой
    'crs_field_price' => array(
       'arguments' => array('element' => NULL)
    ),
  );
}

/**
 * process any products edit form
 */
function crs_any_product_form_alter(&$form, &$form_state) {
  $node = $form['#node'];

  $form['base']['prices']['list_price']['#default_value'] =
    isset($node->_list_price) ? uc_store_format_price_field_value($node->_list_price) : 0;
  $form['base']['prices']['cost']['#default_value'] =
    isset($node->_cost)       ? uc_store_format_price_field_value($node->_cost) : 0;
  $form['base']['prices']['sell_price']['#default_value'] =
    isset($node->_sell_price) ? uc_store_format_price_field_value($node->_sell_price) : 0;

  $form['base']['prices']['#theme'] = 'crs_uc_product_form_prices';
  $form['base']['prices']['crs_list_price'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => isset($node->crs_list_price) ? uc_store_format_price_field_value($node->crs_list_price) : 0,
    '#title' => t('List price'),
  );
  $form['base']['prices']['crs_cost'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => isset($node->crs_cost) ? uc_store_format_price_field_value($node->crs_cost) : 0,
    '#title' => t('Cost'),
  );
  $form['base']['prices']['crs_sell_price'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => isset($node->crs_sell_price) ? uc_store_format_price_field_value($node->crs_sell_price) : 0,
    '#title' => t('Sell price'),
    '#required' => TRUE,
  );

  $currencies = array_merge(array(variable_get('uc_currency_code', 'USD')), crs_currencies());
  $currencies = array_combine($currencies, $currencies);
  $form['base']['prices']['crs_list_price_cur'] = array(
    '#type' => 'select',
    '#title' => t('Crs'),
    '#options' => $currencies,
    '#default_value' => empty($node->crs_list_price_cur) ?
      variable_get('uc_currency_code', 'USD') : $node->crs_list_price_cur,
  );
  $form['base']['prices']['crs_cost_cur'] = array(
    '#type' => 'select',
    '#title' => t('Crs'),
    '#options' => $currencies,
    '#default_value' => empty($node->crs_cost_cur) ?
      variable_get('uc_currency_code', 'USD') : $node->crs_cost_cur,
  );
  $form['base']['prices']['crs_sell_price_cur'] = array(
    '#type' => 'select',
    '#title' => t('Crs'),
    '#options' => $currencies,
    '#default_value' => empty($node->crs_sell_price_cur) ?
      variable_get('uc_currency_code', 'USD') : $node->crs_sell_price_cur,
  );

}

//function _crs_

/**
 * Параметры опции по умолчанию.
 */
function crs_option_defaults_values(&$form, &$form_state) {
  if (empty($form['oid'])) {
    // редактируем существующую опцию
  }
  else {
    // определяем новую опцию для аттрибута
  }
  
  $currencies = array_merge(array(variable_get('uc_currency_code', 'USD')), crs_currencies());
  $currencies = array_combine($currencies, $currencies);

  $form['adjustments']['#theme'] = 'crs_option_defaults_values';
  $form['adjustments']['crs_cost'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => isset($node->crs_list_price) ? uc_store_format_price_field_value($node->crs_list_price) : 0,
    '#title' => t('Cost'),
  );
  $form['adjustments']['crs_cost_cur'] = array(
    '#type' => 'select',
    '#title' => t('Crs'),
    '#options' => $currencies,
    '#default_value' => empty($node->crs_list_price_cur) ?
      variable_get('uc_currency_code', 'USD') : $node->crs_list_price_cur,
  );

  $form['adjustments']['crs_price'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#default_value' => isset($node->crs_list_price) ? uc_store_format_price_field_value($node->crs_list_price) : 0,
    '#title' => t('Price'),
  );
  $form['adjustments']['crs_price_cur'] = array(
    '#type' => 'select',
    '#title' => t('Crs'),
    '#options' => $currencies,
    '#default_value' => empty($node->crs_list_price_cur) ?
      variable_get('uc_currency_code', 'USD') : $node->crs_list_price_cur,
  );
}

function theme_crs_option_defaults_values($form) {
  $output = '<table class="crs">';
  $output .= '<tr><td>'.drupal_render($form['crs_cost']).'</td><td>'.  drupal_render($form['crs_cost_cur']).'</td></tr>';
  $output .= '<tr><td>'.drupal_render($form['crs_price']).'</td><td>'.drupal_render($form['crs_price_cur']).'</td></tr>';
  $output .= '</table>';

  $output .= '<div>';
  $output .= drupal_render($form['cost']);
  $output .= drupal_render($form['price']);
  $output .= drupal_render($form['weight ']);
  $output .= '</div>';
  return $output . drupal_render($form);
}

/**
 * hook_form_alter()
 */
function crs_form_alter(&$form, &$form_state, $form_id) {
  drupal_set_message('crs_form_alter() => ' . $form_id);

  $types = uc_product_types();
  if (!empty($form['#node'])) {
    if (in_array($form['#node']->type, $types)) {
      crs_any_product_form_alter($form, $form_state);
    }
  }

  switch ($form_id) {
    // uc_attribute_options_form список опций в аттрибуте
    case 'uc_attribute_options_form':
      break;

    // uc_attribute_option_form настройки опции в аттрибуте
    case 'uc_attribute_option_form':
      crs_option_defaults_values($form, $form_state);
      break;

    // uc_object_attributes_form список атррибутов товара
    case 'uc_object_attributes_form':
      break;
    
    // uc_object_options_form - значения цен опций в товаре
    case 'uc_object_options_form':
      dsm(array($form, &$form_state), $form_id);
      break;
  }
}

/**
 * Theme function for prices in product_price_form
 */
function theme_crs_uc_product_form_prices($form) {
  $isShowNative = !variable_get('crs_show_native', FALSE) ? 'style="display: none"' : '';
  $output = "<table $isShowNative><tr><td>\n". drupal_render($form['list_price'])
    .'</td><td>'. drupal_render($form['cost'])
    .'</td><td>'. drupal_render($form['sell_price'])
    ."</td></tr></table>\n";
  $output .= "<table id=\"crs-fields\">
    <tr><td>\n". drupal_render($form['crs_list_price']) . drupal_render($form['crs_list_price_cur'])
    .'</td><td>'. drupal_render($form['crs_cost']) . drupal_render($form['crs_cost_cur'])
    .'</td><td>'. drupal_render($form['crs_sell_price']) . drupal_render($form['crs_sell_price_cur'])
    ."</td></tr></table>\n";

  return $output . drupal_render($form);
}

/**
 * Exchange rates settings form
 */
function crs_exchangerate_form() {
  $form['#theme'] = 'crs_exchangerate_form';

  $currency_values = variable_get('crs_currency_rates', array());
  foreach (crs_currencies() as $currency) {
    $form[$currency] = array(
      '#type' => 'textfield',
      '#default_value' => empty($currency_values[$currency]) ? 1 : $currency_values[$currency],
      '#size' => 5,
    );

    $form[$currency . '_delta'] = array(
      '#type' => 'textfield',
      '#default_value' => empty($currency_values[$currency . '_delta']) ? 0 : $currency_values[$currency . '_delta'],
      '#size' => 5,
    );
  }

  $form['show_native'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show native Ubercart\'s price fields at node/xx/edit'),
    '#default_value' => variable_get('crs_show_native', FALSE),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  return $form;
}

function crs_exchangerate_form_submit($form, &$form_state = NULL) {
  $rates = array();
  foreach (crs_currencies() as $currency) {
    $raw_value = $form_state['values'][$currency];
    $raw_value = str_replace(variable_get('uc_currency_dec', ''), '.', $raw_value);
    $rates[$currency] = (float)$raw_value == 0 ? 1 : (float)$raw_value;
    $rates[$currency . '_delta'] = (float)$form_state['values'][$currency . '_delta'];
  }
  variable_set('crs_currency_rates', $rates);
  variable_set('crs_show_native', $form_state['values']['show_native']);
}

function theme_crs_exchangerate_form($form) {
  $header = array(
    '',
    t('Value')
    ,'','',
    t('Delta'),
    ''
  );
  $rows = array();
  foreach (crs_currencies() as $currency) {
    $rows[] = array(
      array('data' => '1 ' . $currency . ' = '),
      array('data' => drupal_render($form[$currency])),
      array('data' => variable_get('uc_currency_code', 'USD')),
      array('data' => '+'),
      array('data' => drupal_render($form[$currency . '_delta'])),
      array('data' => '%'),
    );
  }

  $output = theme('table', $header, $rows, array('class' => 'crs-exchangerate-table'));
  return $output . drupal_render($form);
}

function crs_exch($value, $src_currency, $dst_currency, $title = NULL) {
  $currencies = variable_get('crs_currency_rates', array());
  $native_currency = variable_get('uc_currency_code', 'USD');
  $currencies[$native_currency] = 1.0;
  $currencies[$native_currency . '_delta'] = 0;

  if ($dst_currency == $src_currency) {
    return $value;
  }

  if (!in_array($src_currency, array_keys($currencies))) {
    watchdog('crs', "[$title] Currency '%currency' not found.", array('%currency' => $src_currency), WATCHDOG_ERROR);
    return 0;
  }
  if (!in_array($dst_currency, array_keys($currencies))) {
    watchdog('crs', "[$title] Currency '%currency' not found.", array('%currency' => $dst_currency), WATCHDOG_ERROR);
    return 0;
  }

  // convert
  $new_price = (float)($value) * (float)($currencies[$src_currency]) / (float)($currencies[$dst_currency]);
  
  // apply delta
  if ((float)$currencies[$src_currency . '_delta']) {
    $new_price = $new_price * (1.0 + (float)$currencies[$src_currency . '_delta'] / 100);
  }

  return floor($new_price * 100) / 100;
}

/*
 * Price with currency FAPI element
 */

/**
 * hook_elements()
 */
function crs_elements() {
  return array(
    'crs_field_price' => array(
      '#input' => TRUE,
      '#value_callback' =>   array('crs_field_price_value_callback'),
      '#process' =>          array('crs_field_price_process'),
      '#after_build' =>      array('crs_field_price_after_build'),
      '#validate' =>         array('crs_field_price_validate'),
      '#element_validate' => array('crs_field_price_element_validate'),
      '#pre_render' =>       array('crs_field_price_pre_render'),
      '#post_render' =>      array('crs_field_price_post_render'),
      '#submit' =>           array('crs_field_price_submit'),

      '#currencies' => array('USD', 'EUR'),
      '#value' => 43.32,
      '#currency' => 'EUR',
    ),
  );
}
function theme_crs_field_price($element) {
  dsm($element);
  $output = '<div style="border: 1px solid red">dgfdfg</div>';

  return $output;
}

function crs_field_price_value_callback($element, $edit) {
  dsm(array($element, $edit), 'crs_field_price_value_callback');
}
function crs_field_price_process($element, $edit, &$form_state, $complete_form) {
  dsm(array($element, $edit, $form_state, $complete_form), 'crs_field_price_process');

  return array(
    'm1' => array(
      '#value' => '<h2>Vddddds sdfsdf</h2>',
    ),
    'm2' => array(
      '#type' => 'textfield',
      '#title' => 'sss',
    )
  );
}
function crs_field_price_after_build($element, &$form_state) {
  dsm(array($element, $form_state), 'crs_field_price_after_build');
}
function crs_field_price_validate($form, &$form_state) {
  dsm(array($form, $form_state), 'crs_field_price_validate');
}
function crs_field_price_element_validate($element, &$form_state) {
  dsm(array($form, $form_state), 'crs_field_price_element_validate');
}
function crs_field_price_pre_render($element) {
  dsm(array($form, $form_state), 'crs_field_price_pre_render');
}
function crs_field_price_post_render($content, $element) {
  dsm(array($form, $form_state), 'crs_field_price_post_render');
}
function crs_field_price_submit($form, &$form_state) {
  dsm(array($form, $form_state), 'crs_field_price_submit');
}

function crs_test_form() {
  $form['ddd'] = array('#value' => '<h1>sfsdfsdf</h1>');

  $form['test_element'] = array(
    '#type' => 'crs_field_price',
  );

  return $form;
}